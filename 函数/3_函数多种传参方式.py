"""
函数参数种类
使用方式上的不同，函数有4种常见参数使用方式
    位置参数
    关键字参数
    缺省参数
    不定长参数
"""

"""
位置参数
位置参数：调用函数是根据函数定义的参数位置来传递参数
注意：传递的参数和定义的参数顺序及个数必须一致
"""


def user_info(name, age, gender):

    print(f"您的姓名是{name}，年龄是{age}，性别是{gender}")


user_info("蔡徐坤", 24, "武装直升机")

"""
关键字传参
关键字参数：函数调用时通过”键=值“形式传递参数
作用：可以让函数更加清晰，容易使用，同时也清除了参数的顺序需求
注意：函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序
"""

user_info("miku", gender="no_man", age=18)

"""
缺省参数
缺省参数：缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值
注意:所有位置参数必须出现在默认参数前，包括函数定义和调用
作用：当调用函数时没有传递参数，就会使用默认是缺省参数对应的值
注意：函数调用时，如果为缺省参数传值则修改默认参数值，否者使用这个默认值
"""


def user_qs(name, age, gender="男"):

    print(f"您的姓名是{name}，年龄是{age}，性别是{gender}")


user_qs("周杰轮", 24)
user_qs("周杰轮", 24, "女")

"""
不定长参数
不定长参数：不定长参数也叫可变参数，用于不确定调用的时候会传递多少个参数(不传参也可以)的场景
作用：当调用函数时不确定参数个数时，可以使用不定长参数

不定长参数的类型
    位置传递
    关键字传递
"""

# 位置传递
# 注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是位置传递


def user_gs(*args):
    print(args)


user_gs('TOM', "CAT", 'IKUN')

# 关键字传递
# 注意：参数是“键=值”形式的形式的情况下，所有的“键=值”都会被kwargs接受，同时会根据“键=值”组成字典


def user_gj(**kwargs):
    print(kwargs)


user_gj(name="TOM", age=18, id="A")




